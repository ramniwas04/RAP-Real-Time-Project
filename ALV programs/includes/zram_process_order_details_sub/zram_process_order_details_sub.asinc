*&---------------------------------------------------------------------*
*& Include zram_process_order_details_sub
*&---------------------------------------------------------------------
*----------------------------------------------------------------------*
*       CLASS lcl_report_data IMPLEMENTATION
*----------------------------------------------------------------------*
*    Class for Data fetching from SAP tables
*----------------------------------------------------------------------*
CLASS lcl_report_data IMPLEMENTATION.
  METHOD constructor.
    "    importing !IO_SEL type ref to LCL_REPORT_SEL .
    me->o_sel = io_sel.
  ENDMETHOD.

  " Method to fetch the data from SAP tables
  METHOD get_data.
    TYPES: BEGIN OF lty_aufnr,
             aufnr TYPE lvs_lznum,
           END OF lty_aufnr.

    CONSTANTS lc_s      TYPE c LENGTH 1     VALUE 'S'.    " Constant for status
    CONSTANTS lc_e      TYPE c LENGTH 1     VALUE 'E'.    " Constant for error
    CONSTANTS lc_x      TYPE c LENGTH 1     VALUE 'X'.    " Constant for X
    CONSTANTS lc_txtid  TYPE thead-tdid     VALUE 'KOPF'.
    CONSTANTS lc_txtobj TYPE thead-tdobject VALUE 'AUFK'.
    CONSTANTS lc_p      TYPE lvs_betyp      VALUE 'P'.

    DATA lt_ltak      TYPE TABLE OF lty_aufnr.
    DATA lwa_ltak     TYPE lty_aufnr.
    DATA lt_caufv     TYPE TABLE OF ty_caufv.
    DATA lv_menge     TYPE ekpo-menge.
    DATA lv_menge_out TYPE ekpo-menge.
    DATA lv_status    TYPE string.
    DATA lv_flag      TYPE c LENGTH 1 VALUE ' '.
    DATA lt_afko      TYPE TABLE OF ty_afko.
    DATA lv_txtname   TYPE thead-tdname.
    DATA lt_lines     TYPE TABLE OF tline.
    DATA lwa_lines    TYPE tline.
    DATA lt_jcds      TYPE STANDARD TABLE OF jcds.
    DATA lwa_jcds     TYPE jcds.
    DATA lwa_s_color  TYPE lvc_s_scol.
    DATA lv_langu     TYPE sy-langu.
    DATA lv_tabix     TYPE sy-tabix.

    SELECT objid                      " Object ID of the resource
           arbpl                      " Work center
           werks
           prvbe                     " Production Supply Area
      INTO TABLE it_crhd   " Resource name
      FROM crhd                  " Work Center Header
      WHERE werks IN me->o_sel->lt_werks
        AND arbpl IN me->o_sel->lt_arbpl.

    IF it_crhd[] IS NOT INITIAL.
      SORT it_crhd BY objid.
      " select Routing number of operations in the order
      SELECT aufpl            " Routing number of operations in the order
             aplzl            " Counter
             vornr            " Operation/Activity Number,
             arbid            " Object ID
             werks            " plant
             objnr
             phflg            " Indicator: Phase if deleted
             pvzkn            " General counter for order  (used to get PRVBE)
        INTO TABLE it_afvc
        FROM afvc             " Operation within an order
        FOR ALL ENTRIES IN it_crhd
        WHERE arbid  = it_crhd-objid
          AND werks IN me->o_sel->lt_werks.

      DATA(lt_afvc_temp) = it_afvc.

      SORT lt_afvc_temp BY aufpl
                           pvzkn.

      DELETE it_afvc WHERE phflg <> space.
      IF it_afvc[] IS NOT INITIAL.
        SORT it_afvc BY aufpl.
        " Select the scheduled Start time & date
        SELECT aufpl            " Routing number of operations in the order
               aplzl            " Counter
               fsavd            " Earliest scheduled start: Execution (date)
               fsavz            " Earliest scheduled start: Execution (time)
          INTO TABLE it_afvv
          FROM afvv           " quantities/dates/values in the operation
          FOR ALL ENTRIES IN it_afvc
          WHERE aufpl = it_afvc-aufpl
            AND aplzl = it_afvc-aplzl.
        IF sy-subrc IS INITIAL.
          SORT it_afvv BY aufpl
                          aplzl.  "  Sort the table by Object ID of the resource
        ENDIF.
        " Select the process order number and details from AFKO table
        SELECT aufnr     " Process order number
               gstrs     " Scheduled start Date
               gltrs     " scheduled finish date
               rsnum
               gamng     " Order Qty
               gmein     " UoM
               plnbez    " Material number
               aufpl     " Routing number of operations in order
               aprio     " Order priority
               gluzs     " Scheduled finish time
               gsuzs     " Scheduled Start (Time)
               cy_seqnr  " Sequence Number Order
               stlal     " Alternative BOM
          INTO TABLE it_afko
          FROM afko
          FOR ALL ENTRIES IN it_afvc
          WHERE aufpl  = it_afvc-aufpl
            AND gstrs IN me->o_sel->lt_gstrs.

        IF it_afko[] IS NOT INITIAL.
          DATA(lt_afko_temp) = it_afko[].

          IF lt_afko_temp[] IS NOT INITIAL.
            SORT lt_afko_temp BY rsnum.
            DELETE ADJACENT DUPLICATES FROM lt_afko_temp COMPARING rsnum.
            SELECT rsnum
                   rspos
                   rsart
                   matnr
                   bdmng    " Requirement Quantity
              FROM resb
              INTO TABLE it_resb
              FOR ALL ENTRIES IN lt_afko_temp
              WHERE rsnum  = lt_afko_temp-rsnum
                AND bdmng <> 0.
            SORT it_resb BY rsnum ASCENDING
                            bdmng DESCENDING.
            DELETE ADJACENT DUPLICATES FROM it_resb COMPARING rsnum.  " -->
            " Get Bulk material descriptions..
            SELECT matnr
                   maktx
              INTO TABLE it_resb_makt
              FROM makt
              FOR ALL ENTRIES IN it_resb
              WHERE matnr = it_resb-matnr
                AND spras = sy-langu.
            SORT it_resb BY rsnum.
            SORT it_resb_makt BY matnr.
          ENDIF.

          SORT it_afko BY aufpl.  "  Sort the table by Object ID of the resource

          SELECT matnr
                 maktx
            INTO TABLE it_makt
            FROM makt
            FOR ALL ENTRIES IN it_afko
            WHERE matnr = it_afko-plnbez
              AND spras = sy-langu.

          SORT it_makt BY matnr.
          DELETE ADJACENT DUPLICATES FROM it_makt COMPARING ALL FIELDS.

          IF it_afko IS NOT INITIAL.
            SELECT matnr,
                   werks,
                   fevor    " Production Supervisor
              FROM marc
              INTO TABLE @DATA(it_marc)
              FOR ALL ENTRIES IN @it_afko
              WHERE matnr  = @it_afko-plnbez
                AND werks IN @s_werks.
          ENDIF.

          SELECT aufnr    " Process Order Number
                 objnr
            INTO TABLE it_aufk
            FROM aufk    " Order master data
            FOR ALL ENTRIES IN it_afko
            WHERE aufnr = it_afko-aufnr
              AND autyp = '40'.

          IF it_aufk[] IS NOT INITIAL.

            SORT it_aufk BY aufnr. " Sort the table by process order number

            DATA(it_afko_temp) = it_afko[].
            CLEAR it_afko[].
            LOOP AT it_afko_temp INTO DATA(lwa_afko_temp).
              READ TABLE it_aufk TRANSPORTING NO FIELDS WITH KEY aufnr = lwa_afko_temp-aufnr BINARY SEARCH.
              IF sy-subrc = 0.
                APPEND lwa_afko_temp TO it_afko.
              ENDIF.
            ENDLOOP.
            SORT it_afko BY aufpl.

            " Fetch Status details to apply colors based on latest sequence
            SELECT * FROM jcds
              INTO TABLE lt_jcds
              FOR ALL ENTRIES IN it_aufk
              WHERE objnr  = it_aufk-objnr
                AND stat  IN ( 'I0002', 'I0241', 'I0267', 'I0012', 'I0074', 'I0117', 'I0055', 'I0007' ).
            IF sy-subrc = 0.
              DELETE lt_jcds WHERE inact IS NOT INITIAL.
              SORT lt_jcds DESCENDING BY objnr
                                         udate
                                         utime.
            ENDIF.
            IF it_afvc IS NOT INITIAL.
              SELECT * FROM jcds
                APPENDING TABLE lt_jcds
                FOR ALL ENTRIES IN it_afvc
                WHERE objnr = it_afvc-objnr
                  AND stat  = 'I0117'.
              IF sy-subrc = 0.
                DELETE lt_jcds WHERE inact IS NOT INITIAL.
                SORT lt_jcds DESCENDING BY objnr
                                           udate
                                           utime.
              ENDIF.
            ENDIF.
            " Select the status from Jest table
            SELECT objnr           " Object number
                   stat
              INTO TABLE it_jest  " Status
              FROM jest
              FOR ALL ENTRIES IN it_aufk
              WHERE objnr  = it_aufk-objnr

                AND stat  IN ( 'I0001', 'I0002', 'I0004', 'I0010', 'I0012',
                               'I0045', 'I0046', 'I0076', 'I0241', 'I0340',
                               'I0267', 'I0074', 'I0055',
                                'I0007', 'I0008' ) "
                AND inact <> lc_x.

            SELECT objnr           " Object number
                   stat
              APPENDING TABLE it_jest  " Status
              FROM jest
              FOR ALL ENTRIES IN it_afvc
              WHERE objnr  = it_afvc-objnr
                AND stat   = 'I0117'
                AND inact <> lc_x.

            IF it_jest[] IS NOT INITIAL.

              SORT it_jest BY objnr ASCENDING.   " Sort the table by Object number
              " Select the status from TJ02T table

              SELECT istat          " status
                     txt30
                INTO TABLE it_tj02t  " Status Desc
                FROM tj02t
                FOR ALL ENTRIES IN it_jest
                WHERE istat = it_jest-stat

                  AND spras = sy-langu.

              IF it_tj02t[] IS NOT INITIAL.
                SORT it_tj02t BY istat. " Sort table by status
              ENDIF.
            ENDIF.
          ENDIF.

          lt_afko[] = it_afko[].
          SORT lt_afko BY aufnr.
          DELETE ADJACENT DUPLICATES FROM lt_afko COMPARING aufnr.

          IF lt_afko IS NOT INITIAL.
            SELECT a~aufnr
                   a~pcmnr
                   b~pctxt
              INTO TABLE it_pcmp
              FROM pcmp AS a    " Production campaign item
                     JOIN
                       pcmh AS b ON  a~mandt = b~mandt   " "Production campaign header
                                 AND a~pcmnr = b~pcmnr
              FOR ALL ENTRIES IN lt_afko
              WHERE a~aufnr = lt_afko-aufnr.

            " Get Prod Profile
            SELECT aufnr
                   werks
                   plnbez
                   stlnr
                   saenr   " Change Number
                   stlal
                   sfcpf
              INTO TABLE it_caufv
              FROM caufv
              FOR ALL ENTRIES IN lt_afko
              WHERE aufnr = lt_afko-aufnr.
            IF sy-subrc = 0.
              SORT it_caufv BY aufnr.
              lt_caufv[] = it_caufv[].
              SORT lt_caufv BY werks
                               sfcpf.
              DELETE ADJACENT DUPLICATES FROM lt_caufv COMPARING werks sfcpf.
              DELETE lt_caufv WHERE werks IS INITIAL AND sfcpf IS INITIAL.
              IF lt_caufv[] IS NOT INITIAL.
                " Get Prod Profile Description
                SELECT co_prodprf prodprf_tx INTO TABLE it_tco43t
                  FROM tco43t
                  FOR ALL ENTRIES IN lt_caufv
                  WHERE spras      = sy-langu
                    AND werks      = lt_caufv-werks
                    AND co_prodprf = lt_caufv-sfcpf.
                IF sy-subrc = 0.
                  SORT it_tco43t BY co_prodprf.
                ENDIF.

                DATA(lt_caufv1) = it_caufv.
                SORT lt_caufv1 BY stlnr
                                  saenr
                                  stlal.
                DELETE ADJACENT DUPLICATES FROM lt_caufv1 COMPARING stlnr saenr stlal.

                SELECT FROM stko
                  FIELDS stlty,   " BOM category
                         stlnr,
                         aennr,
                         stlal,
                         labor   " Laboratory/design office
                  FOR ALL ENTRIES IN @lt_caufv1
                  WHERE stlnr = @lt_caufv1-stlnr
                    AND aennr = @lt_caufv1-saenr
                    AND stlal = @lt_caufv1-stlal
                  INTO TABLE @DATA(lt_stko).

                SORT lt_stko BY stlnr
                                aennr
                                stlal.

              ENDIF.

              " Get Material Type
              REFRESH lt_caufv.
              lt_caufv[] = it_caufv[].
              SORT lt_caufv BY plnbez.
              DELETE ADJACENT DUPLICATES FROM lt_caufv COMPARING plnbez.
              DELETE lt_caufv WHERE plnbez IS INITIAL.
              IF lt_caufv[] IS NOT INITIAL.

                SELECT matnr mtart INTO CORRESPONDING FIELDS OF TABLE it_mara
                  FROM mara
                  FOR ALL ENTRIES IN lt_caufv
                  WHERE matnr = lt_caufv-plnbez
                  ORDER BY PRIMARY KEY.

              ENDIF.

            ENDIF.
          ENDIF.
          " change type
          CLEAR gwa_afko.
          LOOP AT lt_afko INTO gwa_afko.

            lwa_ltak-aufnr = gwa_afko-aufnr.
            APPEND lwa_ltak TO lt_ltak.
            CLEAR: lwa_ltak,
                   gwa_afko.
          ENDLOOP.
          " Get TO status
          IF lt_ltak IS NOT INITIAL.

            SELECT kquit  "Indicator: Confirmation
                   lznum  "Additional Reference Number for Transport
                   druck  "Indicator: Transfer Order is Printed
              INTO TABLE it_ltak
              FROM ltak  " WM transfer order header
              FOR ALL ENTRIES IN lt_ltak
              WHERE betyp = lc_p
                AND lznum = lt_ltak-aufnr.

            IF sy-subrc = 0.
              SORT it_ltak BY lznum.
            ENDIF.
          ENDIF.

          SELECT budat
                 bwart
                 matnr
                 werks
                 charg
                 aufnr
            INTO TABLE it_aufm
            FROM aufm   " Goods movements for order
            FOR ALL ENTRIES IN lt_afko
            WHERE aufnr = lt_afko-aufnr.

          IF sy-subrc = 0.
            DELETE it_aufm WHERE bwart <> '101'.
            IF it_aufm IS NOT INITIAL.

              SORT it_aufm BY aufnr
                              budat DESCENDING.

              SELECT bwart
                     matnr
                     werks
                     charg
                     menge
                     meins
                     aufnr
                INTO TABLE it_mseg
                FROM mseg
                FOR ALL ENTRIES IN it_aufm
                WHERE matnr  = it_aufm-matnr
                  AND werks  = it_aufm-werks
                  AND charg  = it_aufm-charg
                  AND bwart IN ( '551', '552', '553', '554' ).
              IF sy-subrc = 0.
                SORT it_mseg BY matnr
                                werks
                                charg
                                bwart.
              ENDIF.
            ENDIF.
          ENDIF.

          " Select Version Id & Batch number from AFPO table
          IF it_afko IS NOT INITIAL.
            SELECT aufnr   " Process Order Number
                   psmng
                   wemng   " Delivery quantity
                   amein
                   meins
                   verid   " version Id
                   ablad   " Unloading Point
                   charg
              INTO TABLE it_afpo " batch Number
              FROM afpo
              FOR ALL ENTRIES IN it_afko
              WHERE aufnr = it_afko-aufnr.
            IF sy-subrc IS INITIAL.

              SORT it_afpo BY aufnr.  " Sort table by Process order number

            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
*    ENDIF.

    IF it_afko[] IS NOT INITIAL.

      " --- Get Supplying Area Deatils
      SELECT rsnum,
             rspos,
             rsart,
             matnr,
             charg,
             aufnr,
             kdauf,
             kdpos,
             posnr,
             vornr,
             prvbe
        FROM resb
        INTO TABLE @DATA(lt_resb_sa)
        FOR ALL ENTRIES IN @it_afko
        WHERE rsnum = @it_afko-rsnum
          AND aufnr = @it_afko-aufnr.
      IF sy-subrc = 0.
        SORT lt_resb_sa[] BY rsnum
                             vornr.
      ENDIF.

    ENDIF.

    REFRESH it_final.
    CLEAR gwa_final.

    SORT it_pcmp BY aufnr. "
    LOOP AT it_afvc INTO gwa_afvc. " Operation within an order
      CLEAR gv_cnf.  "
      gwa_final-werks = gwa_afvc-werks.
      gwa_final-vornr = gwa_afvc-vornr.

      READ TABLE it_afvv INTO gwa_afvv WITH KEY aufpl = gwa_afvc-aufpl
                                                aplzl = gwa_afvc-aplzl BINARY SEARCH.
      IF sy-subrc IS INITIAL.

        gwa_final-gstrs = gwa_afvv-fsavd.   " Earliest scheduled start: Execution (date)
        gwa_final-gsuzs = gwa_afvv-fsavz.                     " Earliest scheduled start: Execution (time)

      ENDIF.

      READ TABLE it_crhd INTO gwa_crhd WITH KEY objid = gwa_afvc-arbid BINARY SEARCH.

      IF sy-subrc IS INITIAL.

        gwa_final-arbpl = gwa_crhd-arbpl.

      ENDIF.

      READ TABLE it_afko INTO gwa_afko WITH KEY aufpl = gwa_afvc-aufpl BINARY SEARCH.

      IF sy-subrc IS INITIAL.
        gwa_final-gltrs  = gwa_afko-gltrs.  " scheduled finish date
        gwa_final-gluzs  = gwa_afko-gluzs.
        gwa_final-aufnr  = gwa_afko-aufnr.
        gwa_final-gamng  = gwa_afko-gamng.
        gwa_final-gmein  = gwa_afko-gmein.
        gwa_final-plnbez = gwa_afko-plnbez.
        gwa_final-stlal  = gwa_afko-stlal.

        READ TABLE it_resb INTO DATA(li_resb_line) WITH KEY rsnum = gwa_afko-rsnum BINARY SEARCH.
        IF sy-subrc = 0.
          READ TABLE it_resb_makt INTO DATA(li_resb_makt_line) WITH KEY matnr = li_resb_line-matnr BINARY SEARCH.
          IF sy-subrc = 0.
            gwa_final-bulk_matnr = li_resb_makt_line-matnr.
            gwa_final-bulk_maktx = li_resb_makt_line-maktx.

            IF gwa_final-bulk_matnr IS NOT INITIAL.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                EXPORTING input  = gwa_final-bulk_matnr
                IMPORTING output = gwa_final-bulk_matnr.

            ENDIF.
          ENDIF.
        ENDIF.
*        ENDIF.

        PERFORM f_prod_profile.

        READ TABLE lt_stko INTO DATA(ls_stko) WITH KEY stlnr = gwa_caufv-stlnr
                                                       aennr = gwa_caufv-saenr
                                                       stlal = gwa_caufv-stlal
             BINARY SEARCH.
        IF sy-subrc = 0.
          gwa_final-labor = ls_stko-labor.
          CLEAR ls_stko.
        ENDIF.

        gwa_final-seqnr = gwa_afko-cy_seqnr.
        gwa_final-aprio = gwa_afko-aprio.
        READ TABLE it_pcmp INTO gwa_pcmp WITH KEY aufnr = gwa_afko-aufnr.

        IF sy-subrc = 0.
" Production campaign
          gwa_final-pcmnr = gwa_pcmp-pcmnr.
          gwa_final-pctxt = gwa_pcmp-pctxt.

        ENDIF.
        READ TABLE it_makt INTO gwa_makt WITH KEY matnr = gwa_afko-plnbez BINARY SEARCH.

        IF sy-subrc = 0.

          gwa_final-ktext = gwa_makt-maktx.

        ENDIF.

        READ TABLE it_marc INTO DATA(wa_marc) WITH KEY matnr = gwa_afko-plnbez.
        IF sy-subrc = 0.
          gwa_final-fevor = wa_marc-fevor. " Production Supervisor

        ENDIF.

        READ TABLE it_aufk INTO gwa_aufk WITH KEY aufnr = gwa_afko-aufnr BINARY SEARCH.

        IF sy-subrc IS INITIAL.

          LOOP AT it_jest INTO gwa_jest WHERE objnr = gwa_aufk-objnr.

            IF gwa_jest-stat = 'I0045' OR gwa_jest-stat = 'I0046'.
              IF p_teco IS INITIAL.
                lv_flag = abap_true.

              ENDIF.
            ELSEIF gwa_jest-stat = 'I0076'.

              lv_flag = 'X'.
            ENDIF.

            READ TABLE it_tj02t INTO gwa_tj02t WITH KEY istat = gwa_jest-stat BINARY SEARCH.
            IF sy-subrc IS INITIAL.
              CONCATENATE gwa_tj02t-txt30 lv_status INTO lv_status SEPARATED BY '. '.
            ENDIF.
            CLEAR gwa_jest.
          ENDLOOP.

          LOOP AT it_jest INTO gwa_jest WHERE objnr = gwa_afvc-objnr.
            IF lwa_s_color-color-col IS INITIAL.
              READ TABLE lt_jcds INTO lwa_jcds WITH KEY objnr = gwa_afvc-objnr.
              IF sy-subrc = 0.
                IF lwa_jcds-stat = gwa_jest-stat.
                  lwa_s_color-color-col = '5'. " Green Font
                  lwa_s_color-color-inv = '1'.
                ENDIF.
              ENDIF.
            ENDIF.

            IF gwa_jest-stat = 'I0045' OR gwa_jest-stat = 'I0046'.
              IF p_teco IS INITIAL.
                lv_flag = abap_true.

              ENDIF.
            ELSEIF gwa_jest-stat = 'I0076'.

              lv_flag = 'X'.
            ENDIF.
            READ TABLE it_tj02t INTO gwa_tj02t WITH KEY istat = gwa_jest-stat BINARY SEARCH.
            IF sy-subrc IS INITIAL.

              CONCATENATE gwa_tj02t-txt30 lv_status INTO lv_status SEPARATED BY '. '.

            ENDIF.

            CLEAR gwa_jest.
          ENDLOOP.

          gwa_final-txt30 = lv_status.

          READ TABLE it_jest INTO gwa_jest WITH KEY objnr = gwa_aufk-objnr BINARY SEARCH.

        ENDIF.

        READ TABLE it_afpo INTO gwa_afpo WITH KEY aufnr = gwa_afko-aufnr BINARY SEARCH.

        IF sy-subrc IS INITIAL.
          gwa_final-ablad   = gwa_afpo-ablad.
          gwa_final-verid   = gwa_afpo-verid.
          gwa_final-charg   = gwa_afpo-charg.
          gwa_final-wemng   = gwa_afpo-wemng.

          gwa_final-psmng_b = gwa_afpo-psmng.
          gwa_final-wemng_b = gwa_afpo-wemng.
          gwa_final-meins_b = gwa_afpo-meins.
          IF gwa_afpo-meins <> gwa_afpo-amein.
            " Convert quantities into base UOM
            lv_menge = 1000.
            CLEAR lv_menge_out.
            CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
              EXPORTING  i_matnr              = gwa_final-plnbez
                         i_in_me              = gwa_afpo-amein
                         i_out_me             = gwa_afpo-meins
                         i_menge              = lv_menge
              IMPORTING  e_menge              = lv_menge_out
              EXCEPTIONS error_in_application = 1
                         error                = 2
                         OTHERS               = 3.
            IF lv_menge_out IS NOT INITIAL.
              gwa_final-psmng_b = gwa_afpo-psmng * lv_menge_out / 1000.
              gwa_final-wemng_b = gwa_afpo-wemng * lv_menge_out / 1000.
            ENDIF.

          ENDIF.
        ENDIF.

        CONCATENATE sy-mandt gwa_aufk-aufnr INTO lv_txtname.

        SELECT tdspras
          UP TO 1 ROWS
          FROM stxh
          INTO lv_langu
          WHERE tdobject = lc_txtobj
            AND tdname   = lv_txtname
            AND tdid     = lc_txtid
          ORDER BY PRIMARY KEY.
        ENDSELECT.

        IF sy-subrc = 0.

          CALL FUNCTION 'READ_TEXT'
            EXPORTING  id                      = lc_txtid
*                       language                = sy-langu
                       language                = lv_langu
                       name                    = lv_txtname
                       object                  = lc_txtobj
            TABLES     lines                   = lt_lines
            EXCEPTIONS id                      = 1
                       language                = 2
                       name                    = 3
                       not_found               = 4
                       object                  = 5
                       reference_check         = 6
                       wrong_access_to_archive = 7
                       OTHERS                  = 8.
          IF sy-subrc = 0.

            CLEAR lwa_lines.
            LOOP AT lt_lines INTO lwa_lines.
              CONCATENATE gwa_final-ltext lwa_lines-tdline INTO gwa_final-ltext.
            ENDLOOP.
          ENDIF.
        ENDIF.
        READ TABLE it_mseg WITH KEY matnr = gwa_final-plnbez
                                    werks = gwa_final-werks
                                    charg = gwa_final-charg
             TRANSPORTING NO FIELDS
             BINARY SEARCH.          "
        IF sy-subrc = 0.
          CLEAR: lv_tabix,
                 gwa_mseg.
          lv_tabix = sy-tabix.
          LOOP AT it_mseg INTO gwa_mseg FROM lv_tabix.
            IF    gwa_mseg-matnr <> gwa_final-plnbez
               OR gwa_mseg-werks <> gwa_final-werks
               OR gwa_mseg-charg <> gwa_final-charg.
              EXIT.
            ENDIF.

            IF gwa_mseg-bwart = 551 OR gwa_mseg-bwart = 553.
              gwa_final-scrap_qty += gwa_mseg-menge.
            ELSEIF gwa_mseg-bwart = 552 OR gwa_mseg-bwart = 554.
              gwa_final-scrap_qty -= gwa_mseg-menge.
            ENDIF.
            IF gwa_final-scrap_qty IS NOT INITIAL.
              gwa_final-scrap_uom = gwa_mseg-meins.
            ENDIF.
          ENDLOOP.
        ENDIF.

        READ TABLE lt_resb_sa ASSIGNING FIELD-SYMBOL(<fs_resb_sa1>) WITH KEY rsnum = gwa_afko-rsnum
                                                                             vornr = gwa_afvc-vornr BINARY SEARCH.
        IF sy-subrc = 0 AND <fs_resb_sa1> IS ASSIGNED.
          DATA(lv_rseb_index1) = sy-tabix.

          LOOP AT lt_resb_sa INTO DATA(lwa_rseb2) FROM lv_rseb_index1.
            IF    lwa_rseb2-rsnum <> gwa_afko-rsnum
               OR lwa_rseb2-vornr <> gwa_afvc-vornr.
              EXIT.
            ENDIF.
            IF lwa_rseb2-prvbe IS NOT INITIAL.

              gwa_final-prvbe = lwa_rseb2-prvbe.

            ENDIF.
          ENDLOOP.

        ENDIF.

        IF gwa_final-prvbe IS INITIAL.

          READ TABLE lt_afvc_temp TRANSPORTING NO FIELDS WITH KEY aufpl = gwa_afvc-aufpl
                                                                  pvzkn = gwa_afvc-aplzl BINARY SEARCH.
          IF sy-subrc = 0.

            DATA(lv_afvc_index) = sy-tabix.

            LOOP AT lt_afvc_temp ASSIGNING FIELD-SYMBOL(<ls_temp_afvc>) FROM lv_afvc_index.
              IF <ls_temp_afvc>-aufpl <> gwa_afvc-aufpl OR <ls_temp_afvc>-pvzkn <> gwa_afvc-aplzl.
                EXIT.
              ENDIF.

              READ TABLE lt_resb_sa ASSIGNING <fs_resb_sa1> WITH KEY rsnum = gwa_afko-rsnum
                                                                     vornr = <ls_temp_afvc>-vornr BINARY SEARCH.
              IF NOT ( sy-subrc = 0 AND <fs_resb_sa1> IS ASSIGNED ).
                CONTINUE.
              ENDIF.

              DATA(lv_rseb_index2) = sy-tabix.

              LOOP AT lt_resb_sa INTO lwa_rseb2 FROM lv_rseb_index2.
                IF    lwa_rseb2-rsnum <> gwa_afko-rsnum
                   OR lwa_rseb2-vornr <> <ls_temp_afvc>-vornr.
                  EXIT.
                ENDIF.
                IF lwa_rseb2-prvbe IS NOT INITIAL.

                  gwa_final-prvbe = lwa_rseb2-prvbe.

                ENDIF.
              ENDLOOP.

            ENDLOOP.

          ENDIF.
        ENDIF.
      ENDIF.

      IF gwa_final-aufnr IS NOT INITIAL.
        IF lv_flag = ''.
          LOOP AT it_aufm INTO DATA(li_aufm_line) WHERE aufnr = gwa_final-aufnr.
            gwa_final-budat = li_aufm_line-budat.
            EXIT.
          ENDLOOP.
          APPEND gwa_final TO it_final.
        ENDIF.
      ENDIF.

      CLEAR: gwa_final,
             gwa_afko,
             gwa_afvc,
             gwa_crhd,
             gwa_aufk,
             gwa_jest,
             gwa_tj02t,
             gwa_afpo,
             gwa_mseg,
             gwa_makt,
             lwa_s_color,
             lv_status,
             lv_flag.

    ENDLOOP.

    IF it_final[] IS NOT INITIAL.
      SORT it_final BY arbpl.        " Sort final table by Resource name
      gv_lines = lines( it_final ).   " To check further line count for refresh rate
      gv_pageline = gv_lines.         "  At INITIAL loading let count be same. - Page down case - 1st page
      it_final_c[] = it_final[].      " Copy of internal table as after each page down items will be deleted from main final table.
    ELSE.
      MESSAGE TEXT-017 TYPE lc_s DISPLAY LIKE lc_e.
      LEAVE LIST-PROCESSING.
    ENDIF.
  ENDMETHOD.
ENDCLASS.


" -----------------------------------------------------------------------
"     CLASS lcl_report_display IMPLEMENTATION
" -----------------------------------------------------------------------
" Class implementation for Alv display
" -----------------------------------------------------------------------
CLASS lcl_report_display IMPLEMENTATION.
  " To display ALV output
  METHOD constructor.
    me->o_data = io_data.
    me->o_sel  = io_sel.
  ENDMETHOD.

  " Display ALV output
  METHOD generate_alv.
    CONSTANTS lc_arbp      TYPE lvc_fname VALUE 'ARBPL'.       " constant for ARBPL
    CONSTANTS lc_gstr      TYPE lvc_fname VALUE 'GSTRS'.       " Constant for GSTRS
    CONSTANTS lc_gsuz      TYPE lvc_fname VALUE 'GSUZS'.       " Constant for GSUZS
    CONSTANTS lc_aufn      TYPE lvc_fname VALUE 'AUFNR'.       " Constant for AUFNR
    CONSTANTS lc_vorn      TYPE lvc_fname VALUE 'VORNR'.       " Constant for VORNR
    CONSTANTS lc_werk      TYPE lvc_fname VALUE 'WERKS'.       " Constant for WERKS
    CONSTANTS lc_plnbe     TYPE lvc_fname VALUE 'PLNBEZ'.      " Constant for PLNBEZ
    CONSTANTS lc_ktex      TYPE lvc_fname VALUE 'KTEXT'.       " Constant for KTEXT
    CONSTANTS lc_char      TYPE lvc_fname VALUE 'CHARG'.       " Constant for CHARG
    CONSTANTS lc_gamn      TYPE lvc_fname VALUE 'GAMNG'.       " Constant for GAMNG
    CONSTANTS lc_wemn      TYPE lvc_fname VALUE 'WEMNG'.       " Constant for WEMNG
    CONSTANTS lc_gmei      TYPE lvc_fname VALUE 'GMEIN'.       " Constant for GMEIN
    CONSTANTS lc_veri      TYPE lvc_fname VALUE 'VERID'.       " Constant for VERID
    CONSTANTS lc_txt       TYPE lvc_fname VALUE 'TXT30'.       " Constant for TXT30
    CONSTANTS lc_seqnr     TYPE lvc_fname VALUE 'SEQNR'.       " Constant for SEQNR
    CONSTANTS lc_aprio     TYPE lvc_fname VALUE 'APRIO'.       " Constant for APRIO
    CONSTANTS lc_ltext     TYPE lvc_fname VALUE 'LTEXT'.       " Constant for LTEXT
    CONSTANTS lc_scrap_qty TYPE lvc_fname VALUE 'SCRAP_QTY'.   " Constant for SCRAP_QTY
    CONSTANTS lc_scrap_uom TYPE lvc_fname VALUE 'SCRAP_UOM'.   " Constant for SCRAP_QTY
    CONSTANTS lc_status    TYPE lvc_fname VALUE 'STATUS'.
    CONSTANTS lc_sfcpf     TYPE lvc_fname VALUE 'SFCPF'.
    CONSTANTS lc_prodprf   TYPE lvc_fname VALUE 'PRODPRF_TX'.
    CONSTANTS lc_reason    TYPE lvc_fname VALUE 'REASON_CODE'.

    DATA p_ddic TYPE salv_s_ddic_reference.

    TRY.
        cl_salv_table=>factory( IMPORTING r_salv_table = lo_alv
                                CHANGING  t_table      = it_final ).
        gr_alv = lo_alv.
      CATCH cx_salv_msg INTO lv_msg ##NO_HANDLER.
    ENDTRY.

    lo_functions = lo_alv->get_functions( ).
    lo_functions->set_default( abap_true ).

    lo_functions = lo_alv->get_functions( ).           " Get ALV Functions
    lo_functions->set_all( if_salv_c_bool_sap=>true ). " Set All default features

    " Get layout object
    lo_layout = lo_alv->get_layout( ).
    " Set Layout save restriction
    " 1. Set Layout Key .. Unique key identifies the Differenet ALVs
    lwa_key-report = sy-repid.
    lo_layout->set_key( lwa_key ).
    " 2. Remove Save layout the restriction.
    lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).

    "  Set Initial Layout

    " Set Default Variant
    lo_layout->set_default( if_salv_c_bool_sap=>true ).

    " Header object
    lo_header = NEW #( ).

    lwa_key-report = sy-repid.
    lo_layout->set_key( lwa_key ).
    " 2. Remove Save layout the restriction.
    lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
    " Set initial Layout
    lo_layout->set_default( if_salv_c_bool_sap=>true ).         " Set Default Variant
    " Header object
    lo_header = NEW #( ).
    " Information in Bold
    lo_grid = NEW #( ).

    lv_head = TEXT-h01.
    " Header of Top of Page
    lo_grid->create_header_information( row     = 1
                                        column  = 1
                                        text    = lv_head
                                        tooltip = lv_head ).

    lo_grid->add_row( ).

    lo_label = lo_grid->create_label( row     = 1
                                      column  = 3
                                      text    = TEXT-002
                                      tooltip = TEXT-002 ).

    WRITE sy-datum TO lv_date MM/DD/YYYY.
    WRITE sy-timlo TO lv_time.
    lv_time = |{ lv_date } { lv_time }|.

    lo_label = lo_grid->create_label( row     = 1
                                      column  = 4
                                      text    = lv_time
                                      tooltip = lv_time ).

    " Add Row --
    lo_grid->add_row( ).

    lo_label = lo_grid->create_label( row     = 2
                                      column  = 1
                                      text    = TEXT-003
                                      tooltip = TEXT-003 ).

    " Add Text in The Grid --
    lv_name = sy-uname.

    lo_text = lo_grid->create_text( row     = 2
                                    column  = 2
                                    text    = lv_name
                                    tooltip = lv_name ).
    " Add Row --
    lo_grid->add_row( ).

    lo_label = lo_grid->create_label( row     = 3
                                      column  = 1
                                      text    = TEXT-004
                                      tooltip = TEXT-004 ).
    " Add Text in The Grid --
    lv_lines = lines( it_final[] ).

    lo_text = lo_grid->create_text( row     = 3
                                    column  = 2
                                    text    = lv_lines
                                    tooltip = lv_lines ).

    lo_label->set_label_for( lo_text ).

    " Move lr_grid to lr_content
    lo_header->set_left_content( lo_grid ).

    " Set the top of list using the header for Online.
    lo_alv->set_top_of_list( lo_header ).

    " set the top of list using the header for Print.
    lo_alv->set_top_of_list_print( lo_header ).

    " get display object
    lo_display = lo_alv->get_display_settings( ).

    " get Columns object
    lo_cols_tab = lo_alv->get_columns( ).
    gr_cols_tab = lo_cols_tab.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_arbp ).
        lo_col_tab->set_long_text( TEXT-005 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_gstr ).
        lo_col_tab->set_long_text( TEXT-006 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_gsuz ).
        lo_col_tab->set_long_text( TEXT-007 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_aufn ).
        lo_col_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
        lo_col_tab->set_long_text( TEXT-008 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_reason ).
        lo_col_tab->set_ddic_reference( p_ddic ).
        lo_col_tab->set_f4( if_salv_c_bool_sap=>true ).

        lo_col_tab->set_long_text( TEXT-054 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_vorn ).
        lo_col_tab->set_long_text( TEXT-019 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_werk ).
        lo_col_tab->set_long_text( TEXT-009 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_plnbe ).
        lo_col_tab->set_long_text( TEXT-010 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_ktex ).
        lo_col_tab->set_long_text( TEXT-011 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_char ).
        lo_col_tab->set_long_text( TEXT-012 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_gamn ).
        lo_col_tab->set_long_text( TEXT-013 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_wemn ).
        lo_col_tab->set_long_text( TEXT-018 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_gmei ).
        lo_col_tab->set_long_text( TEXT-014 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'PSMNG_B' ).
        lo_col_tab->set_long_text( TEXT-050 ).
      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'WEMNG_B' ).
        lo_col_tab->set_long_text( TEXT-051 ).
      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'MEINS_B' ).
        lo_col_tab->set_long_text( TEXT-052 ).
      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_veri ).
        lo_col_tab->set_long_text( TEXT-015 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_txt ).
        lo_col_tab->set_long_text( TEXT-016 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_status ).

        CLEAR lv_num.
        lv_num = strlen( TEXT-036 ).
        IF lv_num <= 10.
          lo_col_tab->set_short_text( TEXT-036 ).
        ELSE.
          lo_col_tab->set_medium_text( TEXT-036 ).
        ENDIF.

        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_seqnr ).
        lo_col_tab->set_long_text( TEXT-021 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_aprio ).
        lo_col_tab->set_long_text( TEXT-022 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_ltext ).
        lo_col_tab->set_long_text( TEXT-023 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_scrap_qty ).
        CLEAR lv_num.
        lv_num = strlen( TEXT-024 ).
        IF lv_num <= 10.
          lo_col_tab->set_short_text( TEXT-024 ).
        ELSE.
          lo_col_tab->set_medium_text( TEXT-024 ).
        ENDIF.
        lo_col_tab->set_long_text( TEXT-025 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_scrap_uom ).
        CLEAR lv_num.
        lv_num = strlen( TEXT-026 ).
        IF lv_num < 10.

          lo_col_tab->set_long_text( TEXT-026 ).
        ENDIF.

**        lo_col_tab->set_short_text( text-026 ).
        lo_col_tab->set_long_text( TEXT-027 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_sfcpf ).

        CLEAR lv_num.
        lv_num = strlen( TEXT-037 ).
        IF lv_num <= 10.
          lo_col_tab->set_short_text( TEXT-037 ).
        ELSE.
          lo_col_tab->set_medium_text( TEXT-037 ).
        ENDIF.
        lo_col_tab->set_long_text( TEXT-037 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( lc_prodprf ).

        CLEAR lv_num.
        lv_num = strlen( TEXT-038 ).
        IF lv_num <= 10.
          lo_col_tab->set_short_text( TEXT-038 ).
        ELSE.
          lo_col_tab->set_medium_text( TEXT-038 ).
        ENDIF.

        lo_col_tab->set_long_text( TEXT-039 ).
        lo_col_tab->set_output_length( 255 ).

      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    DATA lv_short_text TYPE scrtext_s.
    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'BULK_MATNR' ).

        lv_num = strlen( TEXT-040 ).
        IF lv_num <= 10.

          lv_short_text = TEXT-044.
          lo_col_tab->set_short_text( lv_short_text ).
        ELSE.
          lo_col_tab->set_long_text( TEXT-041 ).
          lo_col_tab->set_output_length( 25 ).
        ENDIF.
      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'BULK_MAKTX' ).
        CLEAR lv_num.
        lv_num = strlen( TEXT-042 ).
        IF lv_num <= 20.

          lo_col_tab->set_long_text( TEXT-043 ).
          lo_col_tab->set_output_length( 40 ).
        ENDIF.
      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'LABOR' ).
        CLEAR lv_num.
        lv_num = strlen( TEXT-048 ).
        IF lv_num <= 10.
          lo_col_tab->set_short_text( TEXT-048 ).
        ELSE.
          lo_col_tab->set_long_text( TEXT-047 ).
          lo_col_tab->set_output_length( 40 ).
        ENDIF.
      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'ZPRINT' ).
        CLEAR lv_num.
        lv_num = strlen( TEXT-049 ).
        IF lv_num <= 10.
          lo_col_tab->set_short_text( TEXT-049 ).

        ENDIF.
      CATCH cx_salv_not_found ##NO_HANDLER.
    ENDTRY.

    " get Columns object
    lo_cols = lo_alv->get_columns( ).
    " set the Column optimization
    lo_cols->set_optimize( abap_true ).

    lo_events = lo_alv->get_event( ).
    lr_events = NEW #( io_data = o_data ).
    SET HANDLER lr_events->on_link_click FOR lo_events. " Attach custom events.
    SET HANDLER lr_events->on_user_command FOR lo_events. " Attach custom events.

    " display the output
    lo_alv->display( ).
  ENDMETHOD.
ENDCLASS.                    " lcl_report_alv DEFINITION


" -----------------------------------------------------------------------
" CLASS lcl_handle_events IMPLEMENTATION
" -----------------------------------------------------------------------
CLASS lcl_handle_events IMPLEMENTATION.
  METHOD constructor.
    me->o_data = io_data.
  ENDMETHOD.

  METHOD on_link_click.
    DATA lv_ans TYPE c LENGTH 1.
    " Below constants are not in use

    CONSTANTS lc_dis_icon TYPE icon-name VALUE 'ICON_DISPLAY'.
    CONSTANTS lc_cha_icon TYPE icon-name VALUE 'ICON_CHANGE'.
    CONSTANTS lc_cor2     TYPE sy-tcode  VALUE 'COR2'.
    CONSTANTS lc_cor3     TYPE sy-tcode  VALUE 'COR3'.
    CONSTANTS lc_paraid   TYPE memoryid  VALUE 'BR1'.

    CLEAR gwa_final.

    READ TABLE it_final INTO gwa_final INDEX row.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    CASE column.
      WHEN lc_aufnr.
        IF gwa_final-aufnr IS INITIAL.
          RETURN.
        ENDIF.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
*Display & Change text will be auto populated and translated
                     titlebar       = TEXT-030
                     text_question  = TEXT-029
                     text_button_1  = TEXT-031
                     icon_button_1  = lc_dis_icon
                     text_button_2  = TEXT-032
                     icon_button_2  = lc_cha_icon
          IMPORTING  answer         = lv_ans
          EXCEPTIONS text_not_found = 1
                     OTHERS         = 2.
        IF sy-subrc = 0.
          CASE lv_ans.
            WHEN '1'.
              SET PARAMETER ID lc_paraid FIELD gwa_final-aufnr.
              CALL TRANSACTION lc_cor3 AND SKIP FIRST SCREEN.
            WHEN '2'.
              SET PARAMETER ID lc_paraid FIELD gwa_final-aufnr.
              CALL TRANSACTION lc_cor2 AND SKIP FIRST SCREEN.
            WHEN OTHERS.
          ENDCASE.

        ENDIF.

      WHEN OTHERS.
        " Do nothing
    ENDCASE.
  ENDMETHOD.                    " on_double_click

  METHOD on_user_command.
    DATA gwa_final_c TYPE ty_final.
    DATA gt_aufk     TYPE TABLE OF aufk.
    " TODO: variable is assigned but only used in commented-out code (ABAP cleaner)
    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA gs_aufk     TYPE aufk.

    CASE e_salv_function.
      WHEN '&REFR'.
        m_refresh( ).
      WHEN '&DATA_SAVE'.
        BREAK kotaln01.
        SELECT * FROM aufk INTO TABLE gt_aufk FOR ALL ENTRIES IN it_final WHERE aufnr = it_final-aufnr.

        LOOP AT it_final INTO gwa_final.
          READ TABLE it_final_c INTO gwa_final_c WITH KEY aufnr = gwa_final-aufnr.
*          gwa_final_c-reason_code = gwa_final-reason_code.
          gwa_final = gwa_final_c.

          READ TABLE  gt_aufk INTO gs_aufk WITH KEY aufnr = gwa_final-aufnr.

        ENDLOOP.

        IF lt_error IS NOT INITIAL.
          CALL FUNCTION 'POPUP_WITH_TABLE'
            EXPORTING  endpos_col   = 80
                       endpos_row   = 25
                       startpos_col = 1
                       startpos_row = 1
                       titletext    = 'Error List while Updating Records'
            TABLES     valuetab     = lt_error
            EXCEPTIONS break_off    = 1
                       OTHERS       = 2.
        ELSE.
          UPDATE aufk FROM TABLE gt_aufk.
          IF sy-subrc IS INITIAL.
            MESSAGE TEXT-055 TYPE 'I' DISPLAY LIKE 'I'.
          ENDIF.
        ENDIF.

      WHEN OTHERS.
        " Do nothing
    ENDCASE.
  ENDMETHOD.

  METHOD m_refresh.
    REFRESH it_final.

    " Get data
    o_data->get_data( ).

    " Refresh ALV
    gr_alv_disp->lo_alv->refresh( refresh_mode = if_salv_c_refresh=>full ).
  ENDMETHOD.
ENDCLASS.


" -----------------------------------------------------------------------
"       CLASS lcl_receiver IMPLEMENTATION
" -----------------------------------------------------------------------
"
" -----------------------------------------------------------------------
CLASS lcl_receiver IMPLEMENTATION.
  METHOD handle_finished.
    DATA lo_timer TYPE REF TO cl_gui_timer.

    PERFORM refresh_view.

    lo_timer = NEW #( ).

    lo_timer->interval = p_intvl.  " In Second
    gv_interval += lo_timer->interval.
    lo_timer->run( ).

    IF gv_lines = gv_pageline.
      WRITE sy-timlo TO gv_time.
    ENDIF.
    MESSAGE s007(zitf) WITH TEXT-h02 TEXT-h03 gv_time.
  ENDMETHOD.
ENDCLASS.

*&---------------------------------------------------------------------*
*&      Form  F_SET_SELECTION
*&---------------------------------------------------------------------*
*       To transfer selection data into class tables
*----------------------------------------------------------------------*

FORM f_set_selection.
  gr_sel->lt_werks = s_werks[].
  gr_sel->lt_gstrs = s_gstrs[].
  gr_sel->lt_arbpl = s_arbpl[].
ENDFORM.

" -----------------------------------------------------------------------
"       CLASS lcl_report_sel DEFINITION
" -----------------------------------------------------------------------
"   Selection screen variable definition                               -
" -----------------------------------------------------------------------
CLASS lcl_report_sel IMPLEMENTATION.



ENDCLASS.
*&---------------------------------------------------------------------*
*&      Form  F_PROD_PROFILE
*&---------------------------------------------------------------------*
*       Prod Profile & Description
*----------------------------------------------------------------------*
FORM f_prod_profile.
  " Get process order & plant
  CLEAR gwa_caufv.
  READ TABLE it_caufv INTO gwa_caufv WITH KEY aufnr = gwa_afko-aufnr BINARY SEARCH.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  " Prod profile
  gwa_final-sfcpf = gwa_caufv-sfcpf.
  " Prod Profile description
  CLEAR gwa_tco43t.
  READ TABLE it_tco43t INTO gwa_tco43t WITH KEY co_prodprf = gwa_caufv-sfcpf BINARY SEARCH.
  IF sy-subrc = 0.
    gwa_final-prodprf_tx = gwa_tco43t-prodprf_tx.
  ENDIF.

  CLEAR gwa_mara.
  READ TABLE it_mara INTO gwa_mara  WITH KEY matnr = gwa_caufv-plnbez BINARY SEARCH.
  CLEAR gwa_tvarvc.
  READ TABLE it_tvarvc INTO gwa_tvarvc WITH KEY low = gwa_caufv-werks BINARY SEARCH.
  IF sy-subrc = 0.
    " Check plant for Production supply
    CLEAR gwa_ltak.
    READ TABLE it_ltak INTO gwa_ltak WITH KEY lznum = gwa_caufv-aufnr  BINARY SEARCH.
    IF sy-subrc = 0.
      " TO Confirmed & Printed
      IF gwa_ltak-kquit IS NOT INITIAL AND gwa_ltak-druck IS NOT INITIAL.
        CONCATENATE TEXT-034 ',' TEXT-035 INTO gwa_final-status.
        gv_cnf = abap_true.  "
        " TO confirmed
      ELSEIF gwa_ltak-kquit IS NOT INITIAL.
        gwa_final-status = TEXT-034.
        gv_cnf = abap_true.
        " TO Printed
      ELSEIF gwa_ltak-druck IS NOT INITIAL.
        gwa_final-status = TEXT-035.
      ENDIF.

    ELSE.
      " No TO
      gwa_final-status = TEXT-033.
    ENDIF.

  ELSE.
    " Blank TO Status
    CLEAR gwa_final-status.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  refresh_view
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM refresh_view.
  DATA lo_grid  TYPE REF TO cl_gui_alv_grid.
  DATA lt_final TYPE STANDARD TABLE OF ty_final.

  IF gv_interval >= '600'.
    CLEAR gv_interval.
    REFRESH it_final.
  ELSE.
    APPEND LINES OF it_final FROM 16 TO gv_lines TO lt_final.
    it_final[] = lt_final[].
  ENDIF.
  gv_pageline = lines( it_final ).

  IF it_final IS INITIAL.
    CLEAR gv_interval.
    " Get data
    gr_data->get_data( ).
  ENDIF.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING e_grid = lo_grid.

  IF lo_grid IS NOT INITIAL.
    lo_grid->refresh_table_display( ).
  ENDIF.
ENDFORM.